Wish List)
- How to get devices?
- Understand EXACT boot processs
- What is qemu doing before it boots the kernel?
- why did I need to turn off stack protection for the UART code?
- mmu / tlb and address translation??
- Do i want a device struct / device table?
- How do i know if Im in "real mode"
- How do PS2 and USB interop?
- Add UART FIFO and MCR code
- Documetation!!
   - uart
   - linker
   - PS2
   - Boot processs (README)
- Need .config file
- Actually pass processer state to irqs
- implement + test isr exceptions 0-31
- Implement the color modes beyond text mode for VGA driver
- SHould seperate out public apis that drivers export to user space
- Have user space code actually run in usr space
- IRQ code is coming more and more central since this is event driven
- IRQ code should be cleaned up and set standard for all modules
- Like wise with the scheduler
- Have API more distinct and well defined.
- Need to organize shit better

Actually need todo to move forward)
- Every module needs to call the register module
- Scheduler
- PCI driver
- Network driver
- CPU idle
- Ways of measuring performance i.e. clock cycles
- unified error handling
- Locks / other sync primitives